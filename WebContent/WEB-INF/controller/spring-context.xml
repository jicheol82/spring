<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" 
	xmlns:context="http://www.springframework.org/schema/context" 
	xmlns:p="http://www.springframework.org/schema/p" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans.xsd 
	http://www.springframework.org/schema/context 
	http://www.springframework.org/schema/context/spring-context-4.3.xsd"
	>
	<!-- 다운로드 비즈니스 로직처리해 주는 클래스 bean 객체 만들기 -->
	<bean id="fileDown" class="test.spring.model.DownloadView"/>
	
	<!-- 다운로드를 위해 viewresolver의 우선순위를 최우선을 준다 -->
	<bean class="org.springframework.web.servlet.view.BeanNameViewResolver">
		<property name="order" value="0"/>
	</bean>
	
	<!-- HelloCotroller hello = new test.spring.bean.HelloController()  -->
	<!-- 스프링에 필요한 객체생성이 필요하면 bean태그로 생성 
	<bean id="hello" class="test.spring.bean.HelloController"/> -->

	<!-- 작성한 패키지안의 클래스들중, @Controller 어노테이션이 붙은 클래스들을 모두 스캔 -->
	<context:component-scan base-package="test.spring.bean" />
	<context:component-scan base-package="test.mybatis.bean" />
	
	<!-- Date 객체가 필요 : jsp:useBean과 유사하나
		차이점은 useBean은 기본생성자만 호출하여 객체생성
		bean 태그는 매겨변수있는 생성자 호출 가능.
		객체는 하나만 생성하여 빌려 쓴다.
		단, dto와 같은 것은 bean으로 만들지 않음
		하지만 Model또는 ModelAndView에서는 dto선언만 해도 사용가능하므로 객체
		만들일 없다 -->
	<bean id="day" class="java.util.Date" />
	
	<!-- 기본생성자 호출되며 객체생성 
	<bean id="testBean" class="test.spring.model.TestBean"/>
-->
	<!-- set메서드를 호출하여 데이터 체워서 객체 생성하기 
		property의 name 속성값: Bean클래스의 변수명과 동일
		value 속성값 : 변수에 채워줄 값지정, 변수가 기본형 또는 String
		ref 속성값 : 변수가 class type일 경우 	
		
	<bean id="testBean" class="test.spring.model.TestBean">
		<property name="num" value="100"/>
		<property name="name" value="hello"/>
		<property name="reg" ref="day"/> 
	</bean>-->
	<!--  -->
	<bean id="testBean2" class="test.spring.model.TestBean">
		<constructor-arg value="testNum"/>
		<constructor-arg ref="day"/>
		<property name="num" value="1234"/>
	</bean>
	<!-- 위의 경우 동일한 datatype의 변수가 선언되면 어떤 것을 어디에 집어 넣을까? 
		우선 순서대로 들어가기도 하지만, index번호도 사용가능
		이번 예는 내가 작성한 TestBean에서는 작동안함
		public class TestBean {
			.....
			public TestBean() {}
			public TestBean(String name) {
				this.name = name;
			}
			public TestBean(String name, String num) {
				this.name=name; this.num=num;
			}
		
	<bean id="testBean3" class="test.spring.model.TestBean">
		<constructor-arg index="1" value="100"/>
		<constructor-arg index="0" value="pika"/>
		<constructor-arg type="long" value="20"/> String은 java.lang.String을쓴다.
		<constructor-arg name="name" value="pika"/>
	</bean>
	-->
	
	<!-- viewresolve setting -->
	<bean id="viewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/views/"/>
		<property name="suffix" value=".jsp"/>
		<property name="order" value="1"/><!-- 이 viewresolver는 항상 후순위 -->
	</bean>
	
	<!-- 파일업로드 세팅 -->
	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<property name="maxUploadSize" value="-1"></property>
		<property name="defaultEncoding" value="UTF-8"></property>
	</bean>
	
	<!-- DB 커넥션 정보 세팅 
		dataSource, sqlSessionFactory, sqlSession
	-->
	<!--  DB 데이터 소스 
			DB 컨넥션 정보를 DataSource 타입으로 적어준다 -->
		<!-- 오라클에서는 ?allowMultiQueries=true 옵션이 안되고 {call declare쓰는듯 -->
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close"
		p:driverClassName="oracle.jdbc.driver.OracleDriver"
		p:url="jdbc:oracle:thin:@nullmaster.iptime.org:3000:ORCL"
		p:username="java03"
		p:password="java03"	/>
	<!-- 컨넥션 풀 역할 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource"/>
		<property name="configLocation" value="/WEB-INF/mybatis/mybatis-config.xml"/>
	</bean>
	<!-- 커넥션:클라이언트맵퍼라고 한다
		이전에 사용한 connection과 비슷한 역할
		close()는 clearCache
		mybatis는 연결이 되면 임시저장파일에 이전 접속 정보가 남아있기 때문에 컨넥션을 다시
		처음부터 연결하지 않고 cache에 남아있는 정보를 가져다 쓰므로 빠르다. 그래서 대용량
		처리에 유용하다.(조금 무거울지라도) 
	-->
	<bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate" destroy-method="clearCache">
		<constructor-arg name="sqlSessionFactory" ref="sqlSessionFactory"/>
	</bean>
</beans>